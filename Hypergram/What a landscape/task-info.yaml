type: edu
custom_name: What a landscape!
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Hypergram</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <main>
            <canvas></canvas>
            <section id="edit-section">
                <input type="file" id="file-input" data-multiple-caption="{count} files selected" multiple>
                <label for="file-input">UPLOAD FILE</label>
                <label for="brightness">Brightness</label>
                <input type="range" id="brightness">
                <label for="contrast">Contrast</label>
                <input type="range" id="contrast">
                <label for="transparent">Transparent</label>
                <input type="range" id="transparent">
                <button id="save-button">SAVE IMAGE</button>
            </section>
        </main>
        <script src="script.js"></script>
    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |-
    const pixels = require('image-pixels')
    const path = require('path');
    const filePath = path.resolve(__dirname, '../test/testImage.png');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    const {StageTest, correct, wrong} = require('hs-test-web');

    class HypergramTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                const canvas = document.getElementsByTagName("canvas");
                if (canvas.length !== 1) {
                    return wrong("There is should be 1 canvas element in the page!")
                }

                const uploadButton = document.querySelector("input[type='file']#file-input");
                if (uploadButton === null) {
                    return wrong("Can't find a file upload input field. It should have type 'file' and #file-input id.")
                }

                const brightnessSlider = document.querySelector("input[type='range']#brightness");
                if (brightnessSlider === null) {
                    return wrong("Can't slider for brightness parameter. " +
                        "There is should be an 'input' tag with type 'range' and with #brigtness id!")
                }

                const contrastSlider = document.querySelector("input[type='range']#contrast");
                if (contrastSlider === null) {
                    return wrong("Can't slider for contrast parameter. " +
                        "There is should be an 'input' tag with type 'range' and with #contrast id!")
                }

                const transparent = document.querySelector("input[type='range']#transparent");
                if (transparent === null) {
                    return wrong("Can't slider for transparent parameter. " +
                        "There is should be an 'input' tag with type 'range' and with #transparent id!")
                }

                const saveButton = document.querySelector("button#save-button");
                if (saveButton === null) {
                    return wrong("Can't find a button with #save-button id!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                const uploadButton = await this.page.pageInstance.$("input[type='file']#file-input");
                await uploadButton.uploadFile(filePath);
                await uploadButton.evaluate(upload => upload.dispatchEvent(new Event('change', {bubbles: true})));
                await sleep(500)

                const userPixels = await this.page.evaluate(() => {
                    const canvas = document.getElementsByTagName("canvas")[0];
                    if (canvas.width !== 30 || canvas.height !== 30) {
                        return wrong("After uploading an image into canvas it has wrong size!")
                    }
                    const ctx = canvas.getContext("2d");
                    return ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                });

                const {data} = await pixels(filePath)

                if (data.length !== Object.keys(userPixels).length) {
                    return wrong("Wrong number ox pixels on the canvas!")
                }

                for (let i = 0; i < data.length; i++) {
                    if (data[i] !== userPixels[i]) {
                        return wrong("Looks like some of the pixels have wrong RGB value!")
                    }
                }

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new HypergramTest().runTests()
    }, 30000)
  learner_created: false
- name: test/testImage.png
  visible: false
  learner_created: false
- name: src/style.css
  visible: true
  text: |-
    * {margin: 0; padding: 0}

    main {
        display: flex;
        height: 100vh;
        width: 100vw;
        font-family: 'Montserrat', sans-serif;
    }

    canvas {
        width: 75%;
    }

    #edit-section {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 25%;
        background-color: #81a1d0;
    }


    #edit-section * {
        width: 60%;
        text-align: center;
    }


    #file-input {
        width: 0.1px;
        height: 0.1px;
        opacity: 0;
        overflow: hidden;
        position: absolute;
        z-index: -1;
    }

    #edit-section label {
        font-weight: bold;
        font-size: 17px;
        padding-top: 30px;
    }

    #file-input + label {
        color: #1c1c1c;
        background-color: #dcafc6;
        padding-top: 5px;
        height: 25px;
        border-radius: 2px;
        cursor: pointer;
    }

    #file-input:focus + label, #file-input + label:hover {
        background-color: #a87994;
    }

    #file-input:focus + label {
        outline: 1px dotted #000;
        outline: -webkit-focus-ring-color auto 5px;
    }


    #save-button {
        margin-top: 40px;
        font-size: 17px;
        height: 30px;
        color: black;
        border-radius: 2px;
        background-color: #7d8598;
        cursor: pointer;
        border: transparent;
    }
  learner_created: true
- name: src/script.js
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/14423#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 30 May 2023 13:46:36 UTC"
record: 2
